{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-the-ifb104-workshop","title":"Welcome to the IFB104 Workshop","text":"<p>This website serves as an additional resource for the STIMulate IFB104 workshops at Queensland University of Technology, offering supplementary materials and content to enhance the learning experience.</p> <p>If you think you might need more help or have questions outside of the workshop, feel free to visit the STEM hub at Level 2, GP-Library. Session times for Peer-Learning Facilitators for IFB104 can be found here:</p> <p>STIMulate Roster</p>"},{"location":"#additional-tips-and-resources","title":"Additional Tips and Resources","text":""},{"location":"#coding-environment","title":"Coding Environment","text":"<p>If you haven't yet, getting another Integrated Development Environment (IDE) than the IDLE that Python comes with. Some recommended IDE's that work great with Python can be found below:</p> <ul> <li>PyCharm - An IDE specifically designed for Python and offers a better UI than IDLE</li> <li>Visual Studio Code - One of the most popular IDE's in the coding world and offers a bunch of extensions</li> </ul>"},{"location":"#commenting","title":"Commenting","text":"<p>Ideally your code would be readable even without the comments but it is still good practice to comment so someone (or yourself) can immediately tell what's going on in a code block. Below is an example of a code commentary that's concise and gives a clear explanation of what's going on in the code:</p> <pre><code># Function to add two numbers\ndef add_numbers(x, y):\n    # Store the sum in a variable to return\n    result = x + y\n\n    # Return the result\n    return result\n\n# Loop to print numbers from 1 to 5\nfor i in range(1, 6):\n    print(i) \n</code></pre>"},{"location":"#online-resources","title":"Online Resources","text":"<p>Luckily for us, there are a bunch of online resources in the world of coding. You can explore sites that can explain coding in a ton of different ways till you get it. Here are some suggested sites:</p> <ul> <li>Official Python Docs - a tad intimidating but useful if you really want to know the nitty-gritty</li> <li>W3Schools - offers a comprehensive Python tutorial with examples and a built-in code editor for hands-on practice. The best site to use as a quick reference.</li> </ul>"},{"location":"workshop1/","title":"Workshop 1","text":"<p>In this workshop, we'll be giving you the tools to create a full illustration with Turtle graphics. Below are basic steps that you could follow to draw with Turtle and a cheat sheet of different commands you can use to create the picture you want.</p>"},{"location":"workshop1/#directionmovement-commands","title":"Direction/Movement Commands","text":"<p>One of the most important things in using Turtle is figuring out how it moves. Once you've figured out how it moves you can easily draw anything you want with it.</p> Command Description <code>goto(x , y)</code> Goes to the specific coordinates that were given <code>forward(distance)</code> Moves the turtle forward by a specified distance. <code>backward(distance)</code> Moves the turtle backward by a specified distance. <code>setheading(angle)</code> Sets the direction of the turtle to a specific angle. (has an absolute angle regardless of its current orientation) <code>right(angle)</code> Turns the turtle clockwise by a specified angle. (will depend on its current orientation ) <code>left(angle)</code> Turns the turtle counterclockwise by a specified angle. (will depend on its current orientation ) <code>penup()</code> Lifts the pen off the drawing surface so the turtle can move without drawing. <code>pendown()</code> Puts the pen back down on the drawing surface so the turtle can draw as it moves. <code>speed(speed)</code> Sets the speed of the turtle (0 = fastest, 1 = slowest)."},{"location":"workshop1/#properties-commands","title":"Properties Commands","text":"<p>turtle colors</p> Command Description <code>color(colorstring)</code> Sets pen color. <code>pencolor(colorstring)</code> Sets pen color. <code>fillcolor(colorstring)</code> Sets fill color. <code>bgcolor(colorstring)</code> Sets background color. <code>width(width)</code> Sets pen width. <code>begin_fill()</code> Begins filling area bounded by subsequent drawing commands. <code>end_fill()</code> Ends filling area started by <code>begin_fill()</code>. <code>clear()</code> Clears drawing canvas."},{"location":"workshop1/#steps-in-drawing-with-turtle","title":"Steps in Drawing with Turtle","text":"<p>Here are simplified steps for drawing in Turtle: Sure, here's the Markdown code segment with the numbered list formatted as an ordered list:</p> <p>Step 1: Establish a starting point by setting coordinates.</p> <pre><code>penup()\ngoto(-100, 100)  # Example starting position\n</code></pre> <p>Step 2:  Define drawing properties such as color and the width of the pen.</p> <pre><code>pendown()  # Put the pen down to start drawing\npensize(2)  # Set the thickness of the lines\ncolor(\"blue\")  # Set the color of the lines\n</code></pre> <p>Step 3: Utilize Turtle to create shapes and lines for your image. If you are going to draw something particular, the easiest way to do this is by looking at how to do it in shapes. You can make your own functions that already draw the shapes as well, you can decide the parameters it takes.</p> <pre><code>def draw_circle(x, y, radius, color):\n    penup()\n    goto(x, y)\n    pendown()\n    color(color)\n    begin_fill()\n    circle(radius)\n    end_fill()\n\ndef draw_triangle(points, color):\n    penup()\n    goto(points[0])\n    pendown()\n    color(color)\n    begin_fill()\n    for point in points[1:]:\n        goto(point)\n    goto(points[0])\n    end_fill()\n\n# Draw the body\ndraw_circle(0, -150, 150, \"black\")\n\n# Draw the head\ndraw_circle(0, 0, 100, \"black\")\n\n# Draw the ears\ndraw_triangle([(-30, 80), (-100, 180), (-50, 240)], \"black\")\ndraw_triangle([(30, 80), (100, 180), (50, 240)], \"black\")\n\n# Draw the eyes\ndraw_circle(-40, 40, 20, \"white\")\ndraw_circle(40, 40, 20, \"white\")\n\n# Draw the pupils\ndraw_circle(-40, 60, 10, \"black\")\ndraw_circle(40, 60, 10, \"black\")\n\n# Draw the nose\ndraw_circle(0, 20, 15, \"pink\")\n\n\n# Draw the mouth\npenup()\ngoto(-20, 0)\npendown()\ncolor(\"black\")\nright(90)\ncircle(20, 180)\n</code></pre>"}]}